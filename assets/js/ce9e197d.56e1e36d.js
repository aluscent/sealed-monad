"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[771],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1752:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={},l="Observations",c={unversionedId:"motivations",id:"motivations",title:"Observations",description:"Below are some practices we observed in our codebase that we find useful. By the way, by error we mean business-type of problem. We assume exceptions are handled by some kind of wrapper, like Future.",source:"@site/../sealed-docs/target/mdoc/motivations.md",sourceDirName:".",slug:"/motivations",permalink:"/sealed-monad/docs/motivations",editUrl:"https://github.com/theiterators/sealed-monad/tree/master/docs/../sealed-docs/target/mdoc/motivations.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/sealed-monad/docs/intro"},next:{title:"Use Cases",permalink:"/sealed-monad/docs/usecases"}},u=[],d={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"observations"},"Observations"),(0,a.kt)("p",null,"Below are some practices we observed in our codebase that we find useful. By the way, by error we mean business-type of problem. We assume exceptions are handled by some kind of wrapper, like Future."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import scala.concurrent.Future\n  import cats.instances.future._\n  import cats.Monad\n  import cats.data.OptionT\n  implicit val ec: scala.concurrent.ExecutionContext = scala.concurrent.ExecutionContext.global\n// ec: concurrent.ExecutionContext = scala.concurrent.impl.ExecutionContextImpl@2bdde7f0\n  implicit val M: Monad[Future] = implicitly[Monad[Future]]\n// M: Monad[Future] = cats.instances.FutureInstances$$anon$1@1007266b\n\n  sealed trait Provider\n\n  final case class EmailAddress(value: String) extends AnyVal\n  final case class User(id: Long, email: EmailAddress, archived: Boolean)\n  final case class AuthMethod(provider: Provider) extends AnyVal\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Operation (method) results are represented as ADTs. Ex.:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait LoginResponse\n\n  object LoginResponse {\n      final case class LoggedIn(token: String)             extends LoginResponse\n      case object AccountsMergeRequested                   extends LoginResponse\n      final case class AccountsMerged(token: String)       extends LoginResponse\n      case object InvalidCredentials                       extends LoginResponse\n      case object Deleted                                  extends LoginResponse\n      case object ProviderAuthFailed                       extends LoginResponse\n  }\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Methods (especially in services) are closed units of code, each returning one value out of result ADT for this particular method:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def login(email: String,\n            findUser: String => Future[Option[User]],\n            findAuthMethod: (Long, Provider) => Future[Option[AuthMethod]],\n            issueTokenFor: User => String,\n            checkAuthMethodAction: AuthMethod => Boolean,\n            authMethodFromUserIdF: Long => AuthMethod,\n            mergeAccountsAction: (AuthMethod, User) => Future[LoginResponse]): Future[LoginResponse] = ???\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"There's no distinguished error type")),(0,a.kt)("p",null,'We didn\'t find it useful too often. Also when logging in, if a user is deleted is it "error" or maybe "legit" return value? There\'s no reason to think about it.'),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Error handling should be method-local")),(0,a.kt)("p",null,"Enforcing global or even module-based error handling could be harmful to application architecture - errors are not born equal."),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"For-comprehensions are nice, programmers like them")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Computations create tree-like structures"))),(0,a.kt)("p",null,"If-else = branching."))}p.isMDXComponent=!0}}]);